var searchData=
[
  ['initarrays_462',['initArrays',['../classdipoles_1_1Dipoles.html#a2a2128b516dfd096db85f140b241471a',1,'dipoles::Dipoles']]],
  ['instantiate_5ftest_5fsuite_5fp_463',['INSTANTIATE_TEST_SUITE_P',['../meshProcessorTests_8cpp.html#a096e92ab4c07b4548a8a2682e4d30873',1,'INSTANTIATE_TEST_SUITE_P(integrateTests, TestsIntegrate, ::testing::Values(std::make_tuple(&quot;parabola&quot;, [](double x) { return x *x;}, 0, 2, 8/3.0), std::make_tuple(&quot;sin&quot;, [](double x) { return sin(x);}, 0, 2, -cos(2)+cos(0)), std::make_tuple(&quot;dual_limits&quot;, [](double x) { return x;}, -2, 2, 0), std::make_tuple(&quot;GausIntegral&quot;, [](double x) { return exp(-x *x);}, -std::numeric_limits&lt; double &gt;::infinity(), std::numeric_limits&lt; double &gt;::infinity(), sqrt(M_PI))), firstValueTuplePrinter&lt; TestsIntegrate &gt;):&#160;meshProcessorTests.cpp'],['../meshProcessorTests_8cpp.html#a4c275b7f0995587d6b8aa1795a9a80f7',1,'INSTANTIATE_TEST_SUITE_P(integrateLabmdaTests, TestsIntegrateOneVar, ::testing::Values(std::make_tuple(&quot;zero&quot;, [](double x, double y, double z) { return z *z;}, 0, 2, [](double x, double y) { return 8/3.0;}), std::make_tuple(&quot;parabola&quot;, [](double x, double y, double z) { return x+y+z *z;}, 0, 2, [](double x, double y) { return 2 *x+2 *y+8/3.0;}), std::make_tuple(&quot;non_divisible_z_function&quot;, [](double x, double y, double z) { return x *z+y *z;}, 0, 2, [](double x, double y) { return x *2+y *2;})), firstValueTuplePrinter&lt; TestsIntegrateOneVar &gt;):&#160;meshProcessorTests.cpp'],['../meshProcessorTests_8cpp.html#a92a173a96239546198647af86114a8d1',1,'INSTANTIATE_TEST_SUITE_P(linspaceTests, TestLinspace, ::testing::Values(std::make_tuple(&quot;simple_range&quot;, 0., 1., 2UL, std::valarray{0., 1.}), std::make_tuple(&quot;negative_range&quot;, -2.0, -1., 2UL, std::valarray{-2., -1.}), std::make_tuple(&quot;large_range&quot;, 0., 20., 11UL, std::valarray{0., 2., 4., 6., 8., 10., 12., 14., 16., 18., 20.})), firstValueTuplePrinter&lt; TestLinspace &gt;):&#160;meshProcessorTests.cpp'],['../meshProcessorTests_8cpp.html#a32b4cf87a420e494529aee5291ead66b',1,'INSTANTIATE_TEST_SUITE_P(MeshGenerate, TestMeshGenerate, ::testing::Values(std::make_tuple(&quot;simple_range&quot;, std::vector&lt; double &gt;{0, 1}, std::vector&lt; double &gt;{1, 2}, std::array{std::valarray&lt; double &gt;{0, 1, 0, 1}, std::valarray&lt; double &gt;{1, 1, 2, 2}}), std::make_tuple(&quot;different_ranges&quot;, std::vector&lt; double &gt;{0, 1}, std::vector&lt; double &gt;{1, 2, 3}, std::array{std::valarray&lt; double &gt;{0, 1, 0, 1, 0, 1}, std::valarray&lt; double &gt;{1, 1, 2, 2, 3, 3}}), std::make_tuple(&quot;larger_first_range&quot;, std::vector&lt; double &gt;{-1, 0, 1, 2}, std::vector&lt; double &gt;{1, 2, 3}, std::array{std::valarray&lt; double &gt;{-1, 0, 1, 2,-1, 0, 1, 2,-1, 0, 1, 2}, std::valarray&lt; double &gt;{1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3}})), firstValueTuplePrinter&lt; TestMeshGenerate &gt;):&#160;meshProcessorTests.cpp'],['../meshProcessorTests_8cpp.html#abd7f9e2a4ae9fe4500ab2c941b353250',1,'INSTANTIATE_TEST_SUITE_P(TestFunctionApplyTest, TestFunctionApply, ::testing::Values(std::make_tuple(&quot;simple_range&quot;, std::array{std::valarray&lt; FloatType &gt;{0, 1, 0, 1}, std::valarray&lt; FloatType &gt;{1, 1, 2, 2}}, [](FloatType x, FloatType y){return x+y;}, std::valarray&lt; FloatType &gt;{1, 2, 2, 3}), std::make_tuple(&quot;nonLinearFunction&quot;, std::array{std::valarray&lt; FloatType &gt;{-1, 1,-1, 1}, std::valarray&lt; FloatType &gt;{1, 1, 2, 2}}, [](FloatType x, FloatType y){return x *x+y *y *y;}, std::valarray&lt; FloatType &gt;{2, 2, 9, 9})), firstValueTuplePrinter&lt; TestFunctionApply &gt;):&#160;meshProcessorTests.cpp'],['../SpeedTests_8cpp.html#a06e7eecd4718b4619ef89c01ba07f096',1,'INSTANTIATE_TEST_SUITE_P(Matrixes, IsSymmetricTestSuite, testing::Values(2, 4, 10, 100, 200, 400, 800), testing::PrintToStringParamName()):&#160;SpeedTests.cpp'],['../SpeedTests_8cpp.html#a9a9b19a15589b5fa352e568217f8d63b',1,'INSTANTIATE_TEST_SUITE_P(DipoleNevs, DipoleSolveMethodNevTests, testing::Combine(testing::Values(1, 2, 3, 4, 5, 10, 20, 40, 80, 160, 200), testing::Range(0, 10)), tupleToString&lt; DipoleSolveMethodNevTests &gt;):&#160;SpeedTests.cpp'],['../SpeedTests_8cpp.html#a8aa862d776c66448ba01a5d7bf2929e4',1,'INSTANTIATE_TEST_SUITE_P(ValidationTest, DipolesVerificationTS, ::testing::ValuesIn(testFixtureGetter(filename)), firstValueTuplePrinter&lt; DipolesVerificationTS &gt;):&#160;SpeedTests.cpp']]],
  ['integrate_464',['integrate',['../gausTets_8cpp.html#ab58f5c36640de6d418357b16cc4f1b7d',1,'integrate(std::function&lt; T(T)&gt; &amp;&amp;f1, T left, T right):&#160;gausTets.cpp'],['../gausTets_8cpp.html#aff4a27550e3f1f94393a6b73b44adb60',1,'integrate(std::function&lt; T(T)&gt; &amp;f1, T left, T right):&#160;gausTets.cpp'],['../namespacemeshStorage.html#ac841063819145418e63b00271e2b7231',1,'meshStorage::integrate()']]],
  ['integratefunctionby1val_465',['integrateFunctionBy1Val',['../gausTets_8cpp.html#a16c801d3d025d2358ce5e2875a53e50d',1,'gausTets.cpp']]],
  ['integratelambdaforonevariable_466',['integrateLambdaForOneVariable',['../namespacemeshStorage.html#a12208417507152086a61fb14a0d0648f',1,'meshStorage']]],
  ['iosub_467',['IOSub',['../classcore__intrefaces_1_1IOSub.html#af47eb85dee734af944918b244f49e033',1,'core_intrefaces::IOSub']]],
  ['is_5fnear_468',['is_near',['../namespacetestCommon.html#a1cee6a18bfcf8817c198389069d5a372',1,'testCommon']]],
  ['isppresent_469',['isPPresent',['../classcore__intrefaces_1_1DataAcessInteface.html#ab890cf9c5fdb6e65562c09802de6d01c',1,'core_intrefaces::DataAcessInteface::isPPresent(std::string &amp;&amp;key)'],['../classcore__intrefaces_1_1DataAcessInteface.html#ad28fb1fab1e89c4af6b04b96045509bc',1,'core_intrefaces::DataAcessInteface::isPPresent(std::string &amp;key)']]],
  ['ispresent_470',['isPresent',['../classcore__intrefaces_1_1DataAcessInteface.html#a9c2e7f65cc08dcf8487d82b82f6b3744',1,'core_intrefaces::DataAcessInteface::isPresent(std::string &amp;&amp;key)'],['../classcore__intrefaces_1_1DataAcessInteface.html#a774bd849a001724590acdae0cbb0e008',1,'core_intrefaces::DataAcessInteface::isPresent(std::string &amp;key)'],['../classcore__intrefaces_1_1AbstractProduser.html#ae1a87a1d8fe7772741bd559d374b0a65',1,'core_intrefaces::AbstractProduser::isPresent()']]],
  ['issymmetric_471',['isSymmetric',['../namespacedipoles.html#a556cb15188bb2a76d32d87cb6a815cec',1,'dipoles']]]
];
